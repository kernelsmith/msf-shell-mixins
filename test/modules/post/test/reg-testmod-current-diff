40d39
< 		print_status("Session type is #{session.type}")
42,68c41
< 		print_status()
< 		print_status("TESTING:  registry_value_exist? for key:#{datastore['KEY']}, val:#{datastore['VALUE']}")
< 		results = registry_value_exist?(datastore['KEY'],datastore['VALUE'])
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_value_exist? for key:#{'HKLM\\Non\Existent\key'}, val:#{datastore['VALUE']}")
< 		results = registry_value_exist?('HKLM\\Non\Existent\key',datastore['VALUE'])
< 		print_status("RESULTS (Expecting false):  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_value_exist? for key:#{datastore['KEY']}, val:'NonExistentValue'")
< 		results = registry_value_exist?(datastore['KEY'],'NonExistentValue')
< 		print_status("RESULTS (Expecting false):  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_key_exist? for key: 'HKLM\\Non\Existent\key'")
< 		results = registry_key_exist?('HKLM\\Non\Existent\key')  # need to error handle this properly in meterp ver
< 		print_status("RESULTS (Expecting false):  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_key_exist? for key:#{datastore['KEY']}")
< 		results = registry_key_exist?(datastore['KEY'])
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_getvalinfo for key:#{datastore['KEY']}, val:#{datastore['VALUE']}")
---
> 		print_status "testing get_val_info for key:#{datastore['KEY']}, val:#{datastore['VALUE']}"
70,74c43,44
< 		print_error("reported failure") unless results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("TESTING:  registry_getvaldata for key:#{datastore['KEY']}, val:#{datastore['VALUE']}")
---
> 		print_status("results: #{results.class} #{results.inspect}")
> 		print_status "testing get_val_data for key:#{datastore['KEY']}, val:#{datastore['VALUE']}"
76,77c46
< 		print_error("reported failure") unless results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status("results: #{results.class} #{results.inspect}")
79,80c48
< 		print_status()
< 		print_status("TESTING:  registry_createkey for key:#{datastore['KEY']}\\test")
---
> 		print_status "testing create_key for key:#{datastore['KEY']}\\test"
82,83c50
< 		print_error("reported failure") if results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status("results: #{results.class} #{results.inspect}")
85,86c52
< 		print_status()
< 		print_status("TESTING:  registry_setvaldata for key:#{datastore['KEY']}\\test, val:test, data:test, type:REG_SZ")
---
> 		print_status "testing set_val_data for key:#{datastore['KEY']}\\test, val:test, data:test, type:REG_SZ"
88,89c54
< 		print_error("reported failure") if results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status("results: #{results.class} #{results.inspect}")
91,92c56
< 		print_status()
< 		print_status("Running registry_getvalinfo for freshly created key:#{datastore['KEY']}\\test, val:test")
---
> 		print_status "getting newly created val_info for key:#{datastore['KEY']}\\test, val:test"
94,95c58
< 		print_error("reported failure") unless results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status("results: #{results.class} #{results.inspect}")
97,98c60
< 		print_status()
< 		print_status("TESTING:  registry_deleteval for key:#{datastore['KEY']}\\test, val:test")
---
> 		print_status "testing del_val_data for key:#{datastore['KEY']}\\test, val:test"
100,101c62,63
< 		print_error("reported failure") if results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_errror("registry_deleteval reported failure") unless results
> 		print_status("results: #{results.class} #{results.inspect}")
103,104c65
< 		print_status()
< 		print_status("TESTING:  registry_deletekey")
---
> 		print_status "testing del_key"
106,107c67
< 		print_error("reported failure") if results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status ("results: #{results.class} #{results.inspect}")
109,111c69
< 		print_status()
< 		print_status("Running registry_getvalinfo for deleted key:#{datastore['KEY']}\\test, val:test")
< 		print_status("NOTE: this OUGHT to return nil")
---
> 		print_status "getting deleted val_info for key:#{datastore['KEY']}\\test, val:test, this should return nils"
113,118c71,77
< 		print_status("RESULTS (Expecting nil):  #{results.class} #{results.inspect}")
< 		print_error("reported failure") if results
< 		print_status("nil is correct.  sweet.")  if !results
< 		
< 		print_status()
< 		print_status("TESTING:  registry_enumkeys")
---
> 		if (results.nil?)
> 			print_status ("Delete worked correctly")
> 		else
> 			print_error ("Deleted key is still there!")
> 		end
> 
> 		print_status "testing enum_keys"
120,121c79
< 		print_error("reported failure") unless results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
---
> 		print_status ("results: #{results.class} #{results.inspect}")
123,124c81
< 		print_status()
< 		print_status("TESTING:  registry_enumvals")
---
> 		print_status "testing enum_vals"
126,130c83
< 		print_error("reported failure") unless results
< 		print_status("RESULTS:  #{results.class} #{results.inspect}")
< 		
< 		print_status()
< 		print_status("Testing Complete!")
---
> 		print_status ("results: #{results.class} #{results.inspect}")
